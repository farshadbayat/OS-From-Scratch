#include <timer.h>
#include <stdio.h>
#include <conio.h>
#include <io.h>

int t=0;
int timer_ticks = 0;// This will keep track of how many ticks that the system  has been running for 
int fc=1,bc=0;

//default Rate(timer tick) is 18.222Hz to change it use timer_phase
void timer_phase(int hz)
{
    int divisor = 1193180 / hz;       /* Calculate our divisor */
    outportb(0x43, 0x36);             /* Set our command byte 0x36 */
    outportb(0x40, divisor & 0xFF);   /* Set low byte of divisor */
    outportb(0x40, divisor >> 8);     /* Set high byte of divisor */
}


// take slice time of cpu to taske
void do_timer() 
{
	struct TASK_STRUCT *v = &TASK0;
	bool reEnable = false;
	int x, y;
	x=wherex();
	y=wherey();
	gotoxy(70, 23);
	printf("ESP=%2X", _ESP());

	//gotoxy(71, 24);
	//printf("%x", timer_ticks);
	gotoxy(x, y);
	outportb(0x20, 0x20);
	
	if (IsInterruptsEnabled()) 
	{		
		disable();
		reEnable = true;
    }
	for (; v; v=v->next) {
		if (v->state == TS_RUNNING) 
		{
			if ((v->priority+=30) <= 0)	v->priority = 0xffffffff;
		} else v->priority -= 10;
	}
	if (! (timer_ticks%1));
		//scheduler();
	if (reEnable==true) enable();
}

/* Handles the timer. In this case, it's very simple: We
*  increment the 'timer_ticks' variable every time the
*  timer fires. By default, the timer fires 18.222 times
*  per second. Why 18.222Hz? Some engineer at IBM must've
*  been smoking something funky */

void timer_handler(struct regs *r)
{
    /* Increment our 'tick count' */
    timer_ticks++;

    /* Every 18 clocks (approximately 1 second), we will
    *  display a message on the screen */
    if (timer_ticks % 100 == 0)
    {	
		do_timer();
    }
}

/* This will continuously loop until the given time has
*  been reached */
void timer_wait(int ticks)
{
    unsigned long eticks;

    eticks = timer_ticks + ticks;
    while(timer_ticks < eticks);
}

/* Sets up the system clock by installing the timer handler
*  into IRQ0 */
void Timer_Install()
{
    /* Installs 'timer_handler' to IRQ0 */
	timer_phase(100);
    irq_install_handler(0, timer_handler);
	kprintf("Timer Driver Is Install\t\t\t\t[ OK ]");	   
}


